name: Generate Dictionary Docs

on:
  push:
    paths:
      - 'dictionaries/*.json'
      - 'scripts/**'
      - 'schema/recombinant-schema.json'
      - '.github/workflows/generate-dictionary-docs.yml'
  workflow_dispatch:
    inputs:
      extra_sources:
        description: 'Comma-separated additional recombinant schema URLs (optional)'
        required: false
      use_pr:
        description: 'true => create/update PR instead of direct commit'
        required: false
        default: 'false'
  schedule:
    - cron: '17 4 * * 1'   # Weekly (Mon 04:17 UTC)

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: docs-generation
  cancel-in-progress: false

env:
  PYTHON_VERSION: '3.12'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-${{ env.PYTHON_VERSION }}-

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: (Optional) Fixed remote schemas
        run: |
          mkdir -p dictionaries
          # Add curl commands here if you have canonical remote schema URLs you always want.
          echo "No fixed remote fetch defined."

      - name: Fetch extra workflow_dispatch sources
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.extra_sources != '' }}
        run: |
          mkdir -p dictionaries
          IFS=',' read -ra ARR <<< "${{ inputs.extra_sources }}"
          for url in "${ARR[@]}"; do
            u=$(echo "$url" | xargs)
            [ -z "$u" ] && continue
            base=$(basename "${u%%\?*}")
            case "$base" in
              *.json) : ;;
              *) base="${base}.json" ;;
            esac
            echo "Fetching $u -> dictionaries/$base"
            curl -fsSL "$u" -o "dictionaries/$base"
          done
          echo "Current dictionaries:"
          ls -1 dictionaries || true

      - name: Generate documentation
        run: |
          set -e
          python scripts/generate_docs.py \
            --source dictionaries/*.json \
            --out-dir docs/reference \
            --schema schema/recombinant-schema.json \
            --no-fail-on-error
          echo "Generated files:"
          find docs/reference -type f -maxdepth 3 -print

      - name: Show warnings (if present)
        run: |
            if [ -f docs/reference/generation-warnings.log ]; then
              echo "---- generation-warnings.log ----"
              cat docs/reference/generation-warnings.log
              echo "--------------------------------"
            else
              echo "No warnings file generated."
            fi

      - name: Determine commit strategy
        id: strategy
        run: |
          MODE="direct"
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ inputs.use_pr }}" = "true" ]; then
            MODE="pr"
          fi
          echo "mode=$MODE" >> "$GITHUB_OUTPUT"

      - name: Commit & Push (direct)
        if: ${{ steps.strategy.outputs.mode == 'direct' && github.event_name != 'pull_request' }}
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore: update recombinant docs (global choices last-write-wins)"
          file_pattern: |
            dictionaries/*.json
            docs/reference/*.md
            docs/reference/choices/*.md
            docs/reference/generation-warnings.log

      - name: Create / Update PR
        if: ${{ steps.strategy.outputs.mode == 'pr' && github.event_name != 'pull_request' }}
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "chore: update recombinant docs (global choices last-write-wins)"
          branch: docs/auto-update
          title: "chore: auto-update recombinant docs"
          body: |
            Automated update of recombinant reference documentation.
            - Global shared choice sets (last-write-wins)
            - Regenerated dataset & choice set markdown
            - See warnings (if any) in `docs/reference/generation-warnings.log`
          add-paths: |
            dictionaries/*.json
            docs/reference/*.md
            docs/reference/choices/*.md
            docs/reference/generation-warnings.log
          labels: documentation, automated

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: reference-docs
          path: |
            dictionaries/*.json
            docs/reference
          if-no-files-found: warn
