name: Generate Dictionary Docs

on:
  push:
    paths:
      - 'dictionaries/*.json'
      - 'scripts/**'
      - 'schema/recombinant-schema.json'
      - '.github/workflows/generate-dictionary-docs.yml'
  workflow_dispatch:
    inputs:
      extra_sources:
        description: 'Comma-separated additional recombinant schema URLs (optional)'
        required: false
      use_pr:
        description: 'Set to true to create/update a PR instead of direct commit'
        required: false
        default: 'false'
  schedule:
    - cron: '17 4 * * 1'   # Weekly refresh (Mon 04:17 UTC)

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: docs-generation
  cancel-in-progress: false

env:
  PYTHON_VERSION: '3.12'
  USE_PR_DEFAULT: 'false'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-${{ env.PYTHON_VERSION }}-

      - name: Install deps
        run: pip install -r requirements.txt

      # (Optional) Explicit remote fetch step if you keep authoritative URLs here.
      # The generator script itself also downloads any URL sources it receives.
      - name: (Optional) Fetch known remote schemas
        run: |
          mkdir -p dictionaries
          echo "No fixed remote fetch configured. Add curl lines here if desired."

      - name: Add workflow_dispatch extra sources
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.extra_sources != '' }}
        run: |
          mkdir -p dictionaries
            IFS=',' read -ra ARR <<< "${{ inputs.extra_sources }}"
            for url in "${ARR[@]}"; do
              url_trim=$(echo "$url" | xargs)
              [ -z "$url_trim" ] && continue
              fname=$(basename "${url_trim%%\?*}")
              case "$fname" in
                *.json) : ;;
                *) fname="${fname}.json" ;;
              esac
              echo "Fetching $url_trim -> dictionaries/$fname"
              curl -fsSL "$url_trim" -o "dictionaries/$fname"
            done
          echo "Fetched extra sources:"
          ls -1 dictionaries || true

      - name: Generate Markdown (all local + remote via script materialization)
        run: |
          set -e
          python scripts/generate_docs.py \
            --source dictionaries/*.json \
            --out-dir docs/reference \
            --schema schema/recombinant-schema.json \
            --no-fail-on-error
          echo "Generation complete."
          echo "Resulting docs/reference:"
          find docs/reference -maxdepth 3 -type f -print

      - name: Show warnings (if any)
        if: exists('docs/reference/generation-warnings.log')
        run: |
          echo "---- generation-warnings.log ----"
          cat docs/reference/generation-warnings.log || true
          echo "---------------------------------"

      - name: Decide commit strategy
        id: strategy
        run: |
          USE_PR_INPUT="${{ github.event_name == 'workflow_dispatch' && inputs.use_pr || env.USE_PR_DEFAULT }}"
          if [ "${USE_PR_INPUT}" = "true" ]; then
            echo "mode=pr" >> $GITHUB_OUTPUT
          else
            echo "mode=direct" >> $GITHUB_OUTPUT
          fi
          echo "Strategy mode set to: $(grep mode= $GITHUB_OUTPUT)"

      - name: Commit & Push (direct)
        if: ${{ steps.strategy.outputs.mode == 'direct' && github.event_name != 'pull_request' }}
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: 'chore: update recombinant docs (global choices last-write-wins)'
          file_pattern: |
            dictionaries/*.json
            docs/reference/*.md
            docs/reference/choices/*.md
            docs/reference/generation-warnings.log

      - name: Create / Update PR (if chosen)
        if: ${{ steps.strategy.outputs.mode == 'pr' && github.event_name != 'pull_request' }}
        uses: peter-evans/create-pull-request@v6
        with:
            commit-message: 'chore: update recombinant docs (global choices last-write-wins)'
            branch: docs/auto-update
            title: 'chore: auto-update recombinant docs'
            body: |
              Automated update of recombinant reference documentation.

              - Global shared choice sets (last-write-wins)
              - Regenerated dataset & choice set markdown
              - See warnings (if any) in `docs/reference/generation-warnings.log`
            add-paths: |
              dictionaries/*.json
              docs/reference/*.md
              docs/reference/choices/*.md
              docs/reference/generation-warnings.log
            labels: documentation, automated

      - name: Upload artifact (always)
        uses: actions/upload-artifact@v4
        with:
          name: reference-docs
          path: |
            docs/reference
            dictionaries/*.json
          if-no-files-found: warn
